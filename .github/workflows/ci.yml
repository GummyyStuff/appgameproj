name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  BUN_VERSION: '1.0.0'

jobs:
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: tarkov_casino_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install backend dependencies
        working-directory: ./packages/backend
        run: bun install --frozen-lockfile

      - name: Setup test environment
        working-directory: ./packages/backend
        run: |
          cp .env.test .env
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/tarkov_casino_test" >> .env

      - name: Run database migrations
        working-directory: ./packages/backend
        run: bun run db:migrate:test

      - name: Run backend unit tests
        working-directory: ./packages/backend
        run: bun test --coverage

      - name: Run backend integration tests
        working-directory: ./packages/backend
        run: bun run test:integration

      - name: Upload backend coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./packages/backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ./packages/frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./packages/frontend
        run: npm ci

      - name: Run frontend linting
        working-directory: ./packages/frontend
        run: npm run lint

      - name: Run frontend type checking
        working-directory: ./packages/frontend
        run: npm run type-check

      - name: Run frontend unit tests
        working-directory: ./packages/frontend
        run: npm run test:coverage

      - name: Build frontend
        working-directory: ./packages/frontend
        run: npm run build

      - name: Upload frontend coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./packages/frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  test-e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: tarkov_casino_e2e
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ./packages/frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd packages/backend && bun install --frozen-lockfile
          cd ../frontend && npm ci

      - name: Setup test database
        working-directory: ./packages/backend
        run: |
          cp .env.test .env
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/tarkov_casino_e2e" >> .env
          bun run db:migrate:test
          bun run db:seed:test

      - name: Build frontend
        working-directory: ./packages/frontend
        run: npm run build

      - name: Start backend server
        working-directory: ./packages/backend
        run: |
          bun run start &
          sleep 10
        env:
          NODE_ENV: test

      - name: Start frontend server
        working-directory: ./packages/frontend
        run: |
          npm run preview &
          sleep 5

      - name: Install Playwright
        working-directory: ./packages/frontend
        run: npx playwright install --with-deps

      - name: Run E2E tests
        working-directory: ./packages/frontend
        run: npm run test:e2e

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-report
          path: packages/frontend/playwright-report/
          retention-days: 30

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Setup Node.js for audit
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run npm audit (Frontend)
        working-directory: ./packages/frontend
        run: |
          npm ci
          npm audit --audit-level=high

      - name: Setup Bun for audit
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Run bun audit (Backend)
        working-directory: ./packages/backend
        run: |
          bun install --frozen-lockfile
          bun audit

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, test-e2e, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.CONTAINER_REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.CONTAINER_REGISTRY }}/tarkov-casino:latest
            ${{ secrets.CONTAINER_REGISTRY }}/tarkov-casino:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to staging
        if: github.ref == 'refs/heads/develop'
        run: |
          echo "Deploying to staging environment"
          # Add staging deployment commands here

      - name: Deploy to production
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Deploying to production environment"
          # Add production deployment commands here

  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.event_name == 'pull_request'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: tarkov_casino_perf
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install backend dependencies
        working-directory: ./packages/backend
        run: bun install --frozen-lockfile

      - name: Setup performance test database
        working-directory: ./packages/backend
        run: |
          cp .env.test .env
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/tarkov_casino_perf" >> .env
          bun run db:migrate:test

      - name: Start backend server
        working-directory: ./packages/backend
        run: |
          bun run start &
          sleep 10
        env:
          NODE_ENV: test

      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run performance tests
        run: k6 run tests/performance/load-test.js

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: performance-results.json

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install frontend dependencies
        working-directory: ./packages/frontend
        run: npm ci

      - name: Run ESLint
        working-directory: ./packages/frontend
        run: npm run lint:report

      - name: Upload ESLint results
        uses: actions/upload-artifact@v3
        with:
          name: eslint-results
          path: packages/frontend/eslint-results.json

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: always()

    steps:
      - name: Notify on success
        if: needs.build-and-deploy.result == 'success'
        run: |
          echo "✅ Deployment successful!"
          # Add success notification logic (Slack, Discord, etc.)

      - name: Notify on failure
        if: needs.build-and-deploy.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          # Add failure notification logic (Slack, Discord, etc.)